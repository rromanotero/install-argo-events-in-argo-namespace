apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-webhook
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: github-trigger-dependency
      eventSourceName: webhook
      eventName: github
  triggers:
    - template:
        name: pipeline-trigger
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          parameters:
            - src:
                dependencyName: github-trigger-dependency
                dataKey: body
              dest: spec.arguments.parameters.0.value
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: pipeline-
              spec:
                entrypoint: pipeline
                serviceAccountName: user-workflow-sa
                arguments:
                  parameters:
                  - name: payload
                    value: "ERROR_GITHUB_PAYLOAD_EMPTY"
                templates:
                - name: pipeline
                  steps:
                  - - name: clone
                      template: clone
                      arguments:
                        parameters:
                        - name: payload
                          value: "{{workflow.parameters.payload}}"
                - name: clone
                  inputs:
                    parameters:
                    - name: payload
                  script:
                    image: public.ecr.aws/k7d0s6i7/public_system_container_ci:local
                    command: [python]
                    source: |
                      import json
                      import subprocess
                      from subprocess import Popen, PIPE, STDOUT

                      #Parse git params
                      try:
                        raw_payload = '{{inputs.parameters.payload}}'
                        payload = json.loads(raw_payload)

                        repo_name = payload['repository']['full_name']
                        repo_url = payload['repository']['url']
                        compare_url = payload['compare']
                        ref = payload['ref']
                        head_commit = payload['head_commit']

                        print(f"""
                          Repository params:
                          - Ref: {ref}\n
                          - Repository name: {repo_name}\n
                          - Repository URL: {repo_url}\n
                          - Compare URL: {compare_url}\n
                          - Head commit: {json.dumps(head_commit, indent=4)}\n\n
                        """, flush=True)
                      except Exception as err:
                        raise Exception(f"Failed to parse github payload. Was this "
                              f"triggered from Github? Here's the original "
                              f"unprocessed payload:\n\n {raw_payload}")

                      #Clone + Checkout
                      try:
                        print(f"Cloning repository {repo_url}")
                        proc = subprocess.Popen(
                          [f"git clone {repo_url} && git checkout {ref}"],
                          shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True
                          )
                        proc.wait()
                        output = proc.stdout.read().decode('ascii').replace("\n", "")

                        if proc.returncode == 0:
                          print(output, flush=True)
                        else:
                          raise Exception(f"Git clone exited with code {proc.returncode}."
                                          f"output:\n\n {output}")

                      except Exception as err:
                        raise Exception(f"Failed to clone github repo. {err}") from err
