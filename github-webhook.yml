apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-webhook
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: github-trigger-dependency
      eventSourceName: webhook
      eventName: github
  triggers:
    - template:
        name: pipeline-trigger
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          parameters:
            - src:
                dependencyName: github-trigger-dependency
                dataKey: body
              dest: spec.arguments.parameters.0.value
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: pipeline-
              spec:
                entrypoint: pipeline
                serviceAccountName: user-workflow-sa
                arguments:
                  parameters:
                  - name: payload
                    value: "ERROR_GITHUB_PAYLOAD_EMPTY"
                templates:
                - name: pipeline
                  steps:
                  - - name: clone
                      template: clone
                      arguments:
                        parameters:
                        - name: payload
                          value: "{{workflow.parameters.payload}}"
                - name: clone
                  inputs:
                    parameters:
                    - name: payload
                  sidecars:
                    - name: dind
                      image: docker:19.03.13-dind          # Docker already provides an image for running a Docker daemon
                      env:
                        - name: DOCKER_TLS_CERTDIR         # Docker TLS env config
                          value: ""
                      securityContext:
                        privileged: true                # the Docker daemon can only run in a privileged container
                      # mirrorVolumeMounts will mount the same volumes specified in the main container
                      # to the sidecar (including artifacts), at the same mountPaths. This enables
                      # dind daemon to (partially) see the same filesystem as the main container in
                      # order to use features such as docker volume binding.
                      mirrorVolumeMounts: true
                  script:
                    image: public.ecr.aws/k7d0s6i7/public_system_container_ci:local
                    imagePullPolicy: Always
                    command: [bash]
                    env:
                      - name: DOCKER_HOST
                        value: tcp://127.0.0.1:2375
                      - name: DOCKER_USER  # name of env var
                        valueFrom:
                          secretKeyRef:
                            name: docker-user
                            key: user
                      - name: DOCKER_PSW  # name of env var
                        valueFrom:
                          secretKeyRef:
                            name: docker-psw
                            key: psw
                    source: |
                      set +x
                      set -e

                      PAYLOAD_FILE_PATH=$(mktemp)

                      cat >$PAYLOAD_FILE_PATH<<EOL
                      {{inputs.parameters.payload}}
                      EOL

                      echo '=============================================='
                      echo '        Original unprocessed payload          '
                      echo '=============================================='
                      cat $PAYLOAD_FILE_PATH

                      echo '=============================================='
                      echo '               Parse git params               '
                      echo '=============================================='
                      GIT_PARAMS_FILE_PATH=$(mktemp)
                      /pipeline/parse_git_params.sh $PAYLOAD_FILE_PATH $GIT_PARAMS_FILE_PATH


                      echo '=============================================='
                      echo '             Git clone + checkout             '
                      echo '=============================================='
                      CLONE_URL=$(grep "clone_url" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )
                      REPO_FULL_NAME=$(grep "repo_full_name" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )
                      REF=$(grep "ref" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )
                      BRANCH_NAME=${REF##*/}
                      REPO_PATH=$(pwd)/${REPO_FULL_NAME##*/}

                      git clone $CLONE_URL
                      cd $REPO_PATH && git checkout $BRANCH_NAME && cd ..

                      echo '=============================================='
                      echo '              Project contents                '
                      echo '=============================================='
                      tree $REPO_PATH

                      echo '=============================================='
                      echo '             Detect user services             '
                      echo '=============================================='
                      SERVICES_FOUND_FILE_PATH=$(mktemp)
                      /pipeline/detect_user_services.sh $REPO_PATH $SERVICES_FOUND_FILE_PATH

                      echo '=============================================='
                      echo '             Trigger Kpack Builds             '
                      echo '=============================================='
                      REPO_LASTNAME=${REPO_FULL_NAME##*/}
                      COMMIT_ID=$(grep "commit_id" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )

                      KPACK_TEMPLATE_PATH=$(mktemp)

                      cat >$KPACK_TEMPLATE_PATH<<EOL
                      apiVersion: kpack.io/v1alpha1
                      kind: Image
                      metadata:
                        name: _KPACK_IMAGE_NAME_
                        namespace: default
                      spec:
                        tag: _IMAGE_NAME_
                        serviceAccount: kpack-build-sa
                        builder:
                          name: builder
                          kind: Builder
                        source:
                          git:
                            url: _REPO_URL_
                            revision: $COMMIT_ID
                          subPath: services/_SERVICE_NAME_
                      EOL

                      declare -a kpack_images=()
                      while read service_name; do

                        KPACK_IMAGE_NAME=$REPO_LASTNAME-$service_name-$COMMIT_ID
                        KPACK_IMAGE_NAME=$(echo "$KPACK_IMAGE_NAME" | tr '_' '-')
                        IMAGE_NAME='rromanotero/'$REPO_LASTNAME'_'$service_name

                        kpack_images+=($KPACK_IMAGE_NAME)

                        echo '--------'
                        echo 'kpack image name = '$KPACK_IMAGE_NAME
                        echo 'image name = '$IMAGE_NAME
                        echo 'service name ='$service_name

                        cp $KPACK_TEMPLATE_PATH /tmp/kpack.yaml

                        sed -i "s|_KPACK_IMAGE_NAME_|$KPACK_IMAGE_NAME|g" /tmp/kpack.yaml
                        sed -i "s|_IMAGE_NAME_|$IMAGE_NAME|g" /tmp/kpack.yaml
                        sed -i "s|_REPO_URL_|$CLONE_URL|g" /tmp/kpack.yaml
                        sed -i "s|_SERVICE_NAME_|$service_name|g" /tmp/kpack.yaml

                        cat /tmp/kpack.yaml
                        kubectl apply -f /tmp/kpack.yaml

                        sleep 3
                        kubectl -n default get images $KPACK_IMAGE_NAME

                      done < $SERVICES_FOUND_FILE_PATH

                      echo '=============================================='
                      echo '          Wait for Builds to complete         '
                      echo '=============================================='

                      for image in "${kpack_images[@]}"
                      do
                         nohup logs -image $image 1> kpack_output_$image 2> kpack_output_$image &
                         echo "Log stream configured for $image"
                      done

                      echo '' > /tmp/completed

                      COMPLETED=0
                      NUM_OF_IMAGES=${#kpack_images[@]}

                      echo 'Displaying logs:'
                      while [ $COMPLETED -lt $NUM_OF_IMAGES ]
                      do
                        sleep 10
                        for image in "${kpack_images[@]}"
                        do
                           echo '--------------------------'
                           echo 'LOGS FOR IMAGE '$image
                           (
                              flock -x 200

                              cat kpack_output_$image

                              echo ''
                              if grep -q "COMPLETION" kpack_output_$image
                              then
                                  echo 'COMPLETION DETECTED'
                                  echo 'completed' >> /tmp/completed
                              fi

                              echo '' > kpack_output_$image

                           ) 200>/var/lock/mylockfile

                           COMPLETED=$(wc -l /tmp/completed | awk '{ print $1 }')

                           echo 'COMPLETED '$COMPLETED' of '$NUM_OF_IMAGES

                           echo '--------------------------'
                        done
                      done

                      echo '=============================================='
                      echo '           Create/Update ArgoCD apps          '
                      echo '=============================================='
                      while read service_name; do
                        SERVICE_PATH=$REPO_PATH/services/$service_name
                        echo 'Creating/Updating argocd app for service '$service_name
                        kubectl apply -f $SERVICE_PATH/argocd/app.yaml
                      done < $SERVICES_FOUND_FILE_PATH


                      echo '=============================================='
                      echo '             Upgrade Helm Charts              '
                      echo '=============================================='
                      CD_CLONE_URL=${CLONE_URL%.git}
                      CD_CLONE_URL=$CD_CLONE_URL'_cd.git'
                      CD_REPO_FULL_NAME=$REPO_FULL_NAME'_cd'
                      CD_REPO_PATH=$(pwd)/${CD_REPO_FULL_NAME##*/}

                      echo "cd_clone_url="$CD_CLONE_URL
                      echo "cd_repo_fullname="$CD_REPO_FULL_NAME
                      echo "cd_repo_path="$CD_REPO_PATH

                      git clone $CD_CLONE_URL
                      cd $CD_REPO_PATH && git checkout $BRANCH_NAME && cd ..

                      while read chart_name; do
                        CHART_PATH=$CD_REPO_PATH/helm_charts/$chart_name/Chart.yaml
                        echo '--------------------------------'
                        echo 'Upgrading app '$chart_name

                        sed -i "s|_APP_VERSION_|$COMMIT_ID|g" $CHART_PATH

                        cat $CHART_PATH
                        echo ''

                        git config --global user.email "rromanotero@gmail.com"
                        git config --global user.name "rromanotero"

                        cd $CD_REPO_PATH && git add . && git commit -m "app upgrade" && git push

                        echo '--------------------------------'
                      done < $SERVICES_FOUND_FILE_PATH
