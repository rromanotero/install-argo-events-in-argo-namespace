apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-webhook
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: github-trigger-dependency
      eventSourceName: webhook
      eventName: github
  triggers:
    - template:
        name: pipeline-trigger
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          parameters:
            - src:
                dependencyName: github-trigger-dependency
                dataKey: body
              dest: spec.arguments.parameters.0.value
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: pipeline-
              spec:
                entrypoint: pipeline
                serviceAccountName: user-workflow-sa
                arguments:
                  parameters:
                  - name: payload
                    value: "ERROR_GITHUB_PAYLOAD_EMPTY"
                templates:
                - name: pipeline
                  steps:
                  - - name: clone
                      template: clone
                      arguments:
                        parameters:
                        - name: payload
                          value: "{{workflow.parameters.payload}}"
                - name: clone
                  inputs:
                    parameters:
                    - name: payload
                  sidecars:
                    - name: dind
                      image: docker:19.03.13-dind          # Docker already provides an image for running a Docker daemon
                      env:
                        - name: DOCKER_TLS_CERTDIR         # Docker TLS env config
                          value: ""
                      securityContext:
                        privileged: true                # the Docker daemon can only run in a privileged container
                      # mirrorVolumeMounts will mount the same volumes specified in the main container
                      # to the sidecar (including artifacts), at the same mountPaths. This enables
                      # dind daemon to (partially) see the same filesystem as the main container in
                      # order to use features such as docker volume binding.
                      mirrorVolumeMounts: true
                  script:
                    image: public.ecr.aws/k7d0s6i7/public_system_container_ci:local
                    imagePullPolicy: Always
                    command: [bash]
                    env:
                      - name: GITHUB_TOKEN  # name of env var
                        valueFrom:
                          secretKeyRef:
                            name: github-token
                            key: token
                      - name: DOCKER_HOST
                        value: tcp://127.0.0.1:2375
                      - name: DOCKER_USER  # name of env var
                        valueFrom:
                          secretKeyRef:
                            name: docker-user
                            key: user
                      - name: DOCKER_PSW  # name of env var
                        valueFrom:
                          secretKeyRef:
                            name: docker-psw
                            key: psw
                    source: |
                      set +x
                      set -e

                      PAYLOAD_FILE_PATH=$(mktemp)

                      cat >$PAYLOAD_FILE_PATH<<EOL
                      {{inputs.parameters.payload}}
                      EOL

                      echo '=============================================='
                      echo '        Original unprocessed payload          '
                      echo '=============================================='
                      cat $PAYLOAD_FILE_PATH

                      echo '=============================================='
                      echo '               Parse git params               '
                      echo '=============================================='
                      GIT_PARAMS_FILE_PATH=$(mktemp)
                      /pipeline/parse_git_params.sh $PAYLOAD_FILE_PATH $GIT_PARAMS_FILE_PATH


                      echo '=============================================='
                      echo '             Git clone + checkout             '
                      echo '=============================================='
                      CLONE_URL=$(grep "clone_url" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )
                      REPO_FULL_NAME=$(grep "repo_full_name" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )
                      REF=$(grep "ref" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )
                      BRANCH_NAME=${REF##*/}
                      REPO_PATH=$(pwd)/${REPO_FULL_NAME##*/}

                      git clone $CLONE_URL
                      cd $REPO_PATH && git checkout $BRANCH_NAME && cd ..

                      echo '=============================================='
                      echo '              Project contents                '
                      echo '=============================================='
                      tree $REPO_PATH

                      echo '=============================================='
                      echo '             Detect user services             '
                      echo '=============================================='
                      SERVICES_FOUND_FILE_PATH=$(mktemp)
                      /pipeline/detect_user_services.sh $REPO_PATH $SERVICES_FOUND_FILE_PATH

                      echo '=============================================='
                      echo '                 Build services               '
                      echo '=============================================='
                      echo 'waiting for docker daemon to be ready'
                      until docker ps; do sleep 1; done;
                      REPO_LASTNAME=${REPO_FULL_NAME##*/}
                      while read service_name; do
                        IMAGE_NAME='rromanotero/'$REPO_LASTNAME'_'$service_name
                        SERVICE_PATH=$REPO_PATH/services/$service_name
                        echo '----------------------------------'
                        echo 'Building image '$IMAGE_NAME' from repo '$SERVICE_PATH
                        echo '----------------------------------'
                        pack build $IMAGE_NAME:$BRANCH_NAME --path $SERVICE_PATH --builder gcr.io/buildpacks/builder:v1
                      done < $SERVICES_FOUND_FILE_PATH

                      echo '=============================================='
                      echo '                  Publishing                  '
                      echo '=============================================='
                      echo $DOCKER_PSW > docker_psw
                      cat docker_psw | docker login --username $DOCKER_USER --password-stdin
                      while read service_name; do
                        IMAGE_NAME='rromanotero/'$REPO_LASTNAME'_'$service_name
                        docker push $IMAGE_NAME:$BRANCH_NAME
                      done < $SERVICES_FOUND_FILE_PATH


                      echo '=============================================='
                      echo '             Upgrade Helm Charts              '
                      echo '=============================================='
                      echo 'NOTE:'
                      echo '   Only master images are currently supported'
                      echo '   Let future me add it.'
                      echo '                        '
                      COMMIT_ID=$(grep "commit_id" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )
                      CD_CLONE_URL=${CLONE_URL%.git}
                      CD_CLONE_URL=$CD_CLONE_URL'_cd.git'
                      CD_REPO_FULL_NAME=$REPO_FULL_NAME'_cd'
                      CD_REPO_OWNER=$(echo $CD_REPO_FULL_NAME | cut -f1 -d"/")
                      CD_REPO_LASTNAME=$(echo $CD_REPO_FULL_NAME | cut -f2 -d"/")
                      CD_REPO_PATH=$(pwd)/${CD_REPO_FULL_NAME##*/}

                      echo "commid_id="$COMMIT_ID
                      echo "cd_clone_url="$CD_CLONE_URL
                      echo "cd_repo_fullname="$CD_REPO_FULL_NAME
                      echo "cd_repo_owner="$CD_REPO_OWNER
                      echo "cd_repo_last_name="$CD_REPO_LASTNAME
                      echo "cd_repo_path="$CD_REPO_PATH

                      email="rromanotero@gmail.com"
                      username="ci-system"
                      owner=$CD_REPO_OWNER
                      repo=$CD_REPO_LASTNAME
                      token=$GITHUB_TOKEN

                      git config --global hub.protocol https
                      git config --global user.email $email
                      git config --global user.name $username

                      git clone https://$owner:$token@github.com/$owner/$repo.git
                      cd $CD_REPO_PATH && cd ..

                      CHART_TEMPLATE_PATH=$(mktemp)
                      cat >$CHART_TEMPLATE_PATH<<EOL
                      apiVersion: v2
                      name: _APP_NAME_
                      description: A Helm chart for Kubernetes

                      type: application
                      version: 1.0.0
                      appVersion: _APP_VERSION_
                      EOL

                      while read chart_name; do
                        CHART_PATH=$CD_REPO_PATH/services/$chart_name/Chart.yaml

                        echo '--------------------------------'
                        echo 'Upgrading app '$chart_name

                        APP_NAME=$(echo "$chart_name" | tr '_' '-')
                        APP_VERSION=$BRANCH_NAME'-'$COMMIT_ID

                        cp $CHART_TEMPLATE_PATH $CHART_PATH

                        sed -i "s|_APP_NAME_|$APP_NAME|g" $CHART_PATH
                        sed -i "s|_APP_VERSION_|$APP_VERSION|g" $CHART_PATH

                        echo '|||| chart contents ||||'
                        cat $CHART_PATH
                        echo '|||| chart contents ||||'

                        cd $CD_REPO_PATH && git add . && git commit -m "app upgrade" && git push origin && cd ..

                        echo '--------------------------------'
                      done < $SERVICES_FOUND_FILE_PATH
