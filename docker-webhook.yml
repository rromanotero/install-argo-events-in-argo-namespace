apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: docker-webhook
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: docker-trigger-dependency
      eventSourceName: webhook
      eventName: docker
  triggers:
    - template:
        name: pipeline-trigger
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          parameters:
            - src:
                dependencyName: docker-trigger-dependency
                dataKey: body
              dest: spec.arguments.parameters.0.value
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: pipeline-
              spec:
                entrypoint: pipeline
                serviceAccountName: user-workflow-sa
                arguments:
                  parameters:
                  - name: payload
                    value: "ERROR_DOCKER_PAYLOAD_EMPTY"
                templates:
                - name: pipeline
                  steps:
                  - - name: clone
                      template: clone
                      arguments:
                        parameters:
                        - name: payload
                          value: "{{workflow.parameters.payload}}"
                - name: clone
                  inputs:
                    parameters:
                    - name: payload
                  script:
                    image: public.ecr.aws/k7d0s6i7/public_system_container_ci:local
                    imagePullPolicy: Always
                    command: [bash]
                    source: |
                      set +x
                      set -e

                      PAYLOAD_FILE_PATH=$(mktemp)

                      cat >$PAYLOAD_FILE_PATH<<EOL
                      {{inputs.parameters.payload}}
                      EOL

                      echo '=============================================='
                      echo '        Original unprocessed payload          '
                      echo '=============================================='
                      cat $PAYLOAD_FILE_PATH
                      
                      # echo '=============================================='
                      # echo '             Git clone + checkout             '
                      # echo '=============================================='
                      # CLONE_URL=$(grep "clone_url" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )
                      # REPO_FULL_NAME=$(grep "repo_full_name" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )
                      # REF=$(grep "ref" $GIT_PARAMS_FILE_PATH | cut -d' ' -f2 )
                      # BRANCH_NAME=${REF##*/}
                      # REPO_PATH=$(pwd)/${REPO_FULL_NAME##*/}
                      #
                      # git clone $CLONE_URL
                      # cd $REPO_PATH && git checkout $BRANCH_NAME && cd ..
                      #
                      # echo '=============================================='
                      # echo '              Project contents                '
                      # echo '=============================================='
                      # tree $REPO_PATH
                      #
                      # echo '=============================================='
                      # echo '             Trigger Deployments              '
                      # echo '=============================================='
                      # while read service_name; do
                      #   SERVICE_PATH=$REPO_PATH/services/$service_name
                      #   echo 'Creating/Updating argocd app for service '$service_name
                      #   kubectl apply -f $SERVICE_PATH/argocd/app.yaml
                      # done < $SERVICES_FOUND_FILE_PATH
